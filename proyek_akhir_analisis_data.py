# -*- coding: utf-8 -*-
"""Proyek Akhir - Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aStwW1kO9VtHvXxsv4FXZrbBX_yViu54

# Proyek Analisis Data: E-Commerce Public Dataset
- **Nama:** Muhammad Pazrin Andreanor
- **Email:** riansera515@gmail.com
- **ID Dicoding:** ryfazrin

## Menentukan Pertanyaan Bisnis

- Kota yang banyak memiliki customer?
- Kota yang paling banyak melakukan pembelian?
- Kategori produk apa yang paling banyak dan paling sedikit terjual?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

# Customers
customers_df = pd.read_csv("https://raw.githubusercontent.com/ryfazrin/e-commerce-public-dataset/main/customers_dataset.csv")
customers_df.head()

# Orders
orders_df = pd.read_csv("https://raw.githubusercontent.com/ryfazrin/e-commerce-public-dataset/main/orders_dataset.csv")
orders_df.head()

# Products
products_df = pd.read_csv("https://raw.githubusercontent.com/ryfazrin/e-commerce-public-dataset/main/products_dataset.csv")
products_df.head()

# Order Items
order_items_df = pd.read_csv("https://raw.githubusercontent.com/ryfazrin/e-commerce-public-dataset/main/order_items_dataset.csv")
order_items_df.head()

"""### Assessing Data

#### Customers
"""

customers_df.info()

print("Jumlah duplikasi data customers: ", orders_df.duplicated().sum())

customers_df.describe()

"""#### Orders"""

orders_df.info()

orders_df.isna().sum()

"""**Task Data Orders**

Terdapat data Kosong:
1. order_approved_at                 160
2. order_delivered_carrier_date     1783
3. order_delivered_customer_date    2965

typedata salah:
 1. order_purchase_timestamp       99441 non-null  object
 2. order_approved_at              99281 non-null  object
 3. order_delivered_carrier_date   97658 non-null  object
 4. order_delivered_customer_date  96476 non-null  object
 5. order_estimated_delivery_date  99441 non-null  object
"""

print("Jumlah duplikasi data orders: ", orders_df.duplicated().sum())

orders_df.describe()

"""#### Products"""

products_df.info()

products_df.isna().sum()

print("Jumlah duplikasi products: ", products_df.duplicated().sum())

"""**Task Data Products**

Terdapat data Kosong:
1. product_category_name         610
2. product_name_lenght           610
3. product_description_lenght    610
4. product_photos_qty            610
5. product_weight_g                2
6. product_length_cm               2
7. product_height_cm               2
8. product_width_cm                2
"""

products_df.describe()

"""#### Order Items"""

order_items_df.info()

"""**Task Data Orders Items**

typedata salah:
 1. oshipping_limit_date    112650 non-null  object
"""

print("Jumlah duplikasi Order Items: ", order_items_df.duplicated().sum())

order_items_df.describe()

"""### Cleaning Data

**Task Data Orders**

Terdapat data Kosong:
1. order_approved_at                 160
2. order_delivered_carrier_date     1783
3. order_delivered_customer_date    2965

typedata salah:
 1. order_purchase_timestamp       99441 non-null  object
 2. order_approved_at              99281 non-null  object
 3. order_delivered_carrier_date   97658 non-null  object
 4. order_delivered_customer_date  96476 non-null  object
 5. order_estimated_delivery_date  99441 non-null  object


**Task Data Products**

Terdapat data Kosong:
1. product_category_name         610
2. product_name_lenght           610
3. product_description_lenght    610
4. product_photos_qty            610
5. product_weight_g                2
6. product_length_cm               2
7. product_height_cm               2
8. product_width_cm                2

**Task Data Orders Items**

typedata salah:
 1. oshipping_limit_date    112650 non-null  object

#### Orders

##### Missing value order_approved_at
"""

orders_df[orders_df.order_approved_at.isna()]

orders_df.order_approved_at.value_counts()

orders_df.order_approved_at.fillna(value="2018-02-27 04:31:10", inplace=True)

orders_df.isna().sum()

"""##### Missing value order_delivered_carrier_date"""

orders_df[orders_df.order_delivered_carrier_date.isna()]

orders_df.order_delivered_carrier_date.value_counts()

orders_df.order_delivered_carrier_date.fillna(value="2018-05-09 15:48:00", inplace=True)

orders_df.isna().sum()

"""##### Missing value order_delivered_customer_date"""

orders_df[orders_df.order_delivered_customer_date.isna()]

orders_df.order_delivered_customer_date.value_counts()

orders_df.order_delivered_customer_date.fillna(value="2018-05-08 23:38:46", inplace=True)

orders_df.isna().sum()

"""##### Mengganti type data datetime"""

datetime_columns = ["order_purchase_timestamp", "order_approved_at",
                    "order_delivered_carrier_date", "order_delivered_customer_date",
                    "order_estimated_delivery_date"]

for column in datetime_columns:
  orders_df[column] = pd.to_datetime(orders_df[column])

orders_df.info()

"""#### Products

##### product_category_name
"""

products_df[products_df.product_category_name.isna()]

products_df.product_category_name.value_counts()

products_df.product_category_name.fillna(value="cama_mesa_banho", inplace=True)

products_df.isna().sum()

"""##### product_name_lenght"""

products_df[products_df.product_name_lenght.isna()]

products_df.product_name_lenght.value_counts()

products_df.product_name_lenght.fillna(value=60, inplace=True)

products_df.isna().sum()

"""##### product_description_lenght"""

products_df[products_df.product_description_lenght.isna()]

products_df.product_description_lenght.value_counts()

products_df.product_description_lenght.fillna(value=404, inplace=True)

products_df.isna().sum()

"""##### product_photos_qty"""

products_df[products_df.product_photos_qty.isna()]

products_df.product_photos_qty.value_counts()

products_df.product_photos_qty.fillna(value=1, inplace=True)

products_df.isna().sum()

"""##### product_weight_g, product_height_cm, dan product_width_cm"""

products_df[products_df.product_weight_g.isna()]

products_df.product_weight_g.fillna(value=products_df.product_weight_g.mean, inplace=True)
products_df.product_height_cm.fillna(value=products_df.product_height_cm.mean, inplace=True)
products_df.product_length_cm.fillna(value=products_df.product_length_cm.mean, inplace=True)
products_df.product_width_cm.fillna(value=products_df.product_width_cm.mean, inplace=True)

products_df.isna().sum()

"""#### Order Items

##### oshipping_limit_date typedata ke datetime
"""

datetime_columns = ["shipping_limit_date"]

for column in datetime_columns:
  order_items_df[column] = pd.to_datetime(order_items_df[column])

order_items_df.info()

"""## Exploratory Data Analysis (EDA)

### Explore Data customers_df
"""

customers_df.describe(include="all")

customers_df.groupby(by="customer_city").customer_unique_id.nunique().sort_values(ascending=False)

"""Kota yang banyak memiliki Customer"""

customers_df.groupby(by="customer_state").customer_id.nunique().sort_values(ascending=False)

"""### Explore Data orders_df"""

orders_df.describe(include="all")

"""- **order_purchase_timestamp**: Shows the purchase timestamp.
- **order_approved_at**: Shows the payment approval timestamp.
- **order_delivered_carrier_date**: Shows the order posting timestamp. When it was handled to the logistic partner.
- **order_delivered_customer_date**: Shows the actual order delivery date to the customer.
- **order_estimated_delivery_date**: Shows the estimated delivery date that was informed to customer at the purchase moment.

###  Explore Data orders_df dan customers_df
"""

customer_id_in_orders_df =  orders_df.customer_id.tolist()
customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orders_df else "Non Active")
customers_df.sample(5)

customers_df.groupby(by="status").customer_id.count()

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
orders_customers_df.head()

orders_customers_df.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).reset_index().head(10)

"""Kota yang banyak melakukan pembelian/order.

### Eksplorasi Data products_df dan order_items_df
"""

products_df.describe(include="all")

order_items_df.describe(include="all")

products_df.groupby(by="product_category_name").agg({
    "product_id": "nunique",
    "product_photos_qty": "sum",
})

order_items_products_df = pd.merge(
    left=order_items_df,
    right=products_df,
    how="left",
    left_on="product_id",
    right_on="product_id"
)
order_items_products_df.head()

order_items_products_df.groupby(by="product_category_name").agg({
    "product_id": "nunique",
    "price": ["min", "max"]
})

order_items_products_df.groupby(by="product_category_name").order_id.nunique().sort_values(ascending=False).reset_index().head(10)

"""Kategori produk yang banyak dibeli/order.

### Eksplorasi Data all_df
"""

all_df = pd.merge(
    left=order_items_products_df,
    right=orders_customers_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
all_df.head()

all_df.groupby(by=["customer_city", "product_category_name"]).agg({
    "price": "sum"
})

"""Kategori produk yang disukai pengguna berdasarkan lokasi kota.

## Visualization & Explanatory Analysis

### Pertanyaan 1: Kota yang banyak memiliki customer.
"""

customer_city_df = all_df.groupby("customer_city").customer_unique_id.nunique().sort_values(ascending=False).reset_index()
customer_city_df.head(15)

fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(16, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="customer_unique_id", y="customer_city", data=customer_city_df.head(10), palette=colors, ax=ax)
ax.set_ylabel(None)
ax.set_xlabel(None)
ax.set_title("Most customers in a city", loc="center", fontsize=15)
ax.tick_params(axis ='y', labelsize=12)

plt.suptitle("Most customers in a city", fontsize=20)
plt.show()

"""### Pertanyaan 2: Kota yang paling banyak melakukan pembelian."""

sum_order_by_customer_city_df = all_df.groupby("customer_city").order_id.nunique().sort_values(ascending=False).reset_index()
sum_order_by_customer_city_df.head(15)

fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(16, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="order_id", y="customer_city", data=sum_order_by_customer_city_df.head(10), palette=colors, ax=ax)
ax.set_ylabel(None)
ax.set_xlabel(None)
ax.set_title("Most customers in a city", loc="center", fontsize=15)
ax.tick_params(axis ='y', labelsize=12)

plt.suptitle("Most Orders in a city", fontsize=20)
plt.show()

"""### Pertanyaan 3: Kategori produk apa yang paling banyak dan paling sedikit terjual."""

sum_order_items_df = all_df.groupby("product_category_name").order_id.nunique().sort_values(ascending=False).reset_index()
sum_order_items_df.head(15)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="order_id", y="product_category_name", data=sum_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Category Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="order_id", y="product_category_name", data=sum_order_items_df.sort_values(by="order_id", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Category Product", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Best and Worst Performing Category Product by Number of Sales", fontsize=20)
plt.show()

"""## Conclusion

1. Kota yang banyak memiliki customer?

  - sao paulo dengan jumlah customer 14865.

2. Kota yang paling banyak melakukan pembelian?

  - sao paulo dengan jumlah order	15402.

3. Kategori produk apa yang paling banyak dan paling sedikit terjual?
  - Kategori produk cama_mesa_banho adalah paling banyak terjual dengan jumlah 10860.
  - Kategori produk seguros_e_servicos adalah paling sedikit terjual dengan jumlah 2.

# All data to csv
"""

all_df.to_csv("all_data.csv", index=False)